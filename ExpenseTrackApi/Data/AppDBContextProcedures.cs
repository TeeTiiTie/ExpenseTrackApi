// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ExpenseTrack.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ExpenseTrack.Data
{
    public partial class AppDBContext
    {
        private IAppDBContextProcedures _procedures;

        public virtual IAppDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AppDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAppDBContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<usp_ExpenseGroup_SelectResult>().HasNoKey().ToView(null);
        }
    }

    public partial class AppDBContextProcedures : IAppDBContextProcedures
    {
        private readonly AppDBContext _context;

        public AppDBContextProcedures(AppDBContext context)
        {
            _context = context;
        }

        public virtual async Task<List<usp_ExpenseGroup_SelectResult>> usp_ExpenseGroup_SelectAsync(DateTime? CreatedDateFrom, DateTime? CreatedDateTo, int? BranchId, int? ExpenseStatusId, string SearchText, int? IndexStart, int? PageSize, string SortField, string OrderType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CreatedDateFrom",
                    Value = CreatedDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedDateTo",
                    Value = CreatedDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "BranchId",
                    Value = BranchId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ExpenseStatusId",
                    Value = ExpenseStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchText",
                    Size = 510,
                    Value = SearchText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IndexStart",
                    Value = IndexStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortField",
                    Size = -1,
                    Value = SortField ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrderType",
                    Size = -1,
                    Value = OrderType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_ExpenseGroup_SelectResult>("EXEC @returnValue = [dbo].[usp_ExpenseGroup_Select] @CreatedDateFrom = @CreatedDateFrom, @CreatedDateTo = @CreatedDateTo, @BranchId = @BranchId, @ExpenseStatusId = @ExpenseStatusId, @SearchText = @SearchText, @IndexStart = @IndexStart, @PageSize = @PageSize, @SortField = @SortField, @OrderType = @OrderType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> usp_GenerateCodeAsync(string TransactionCodeControlTypeDetail, int? RunningLenght, OutputParameter<string> Result, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterResult = new SqlParameter
            {
                ParameterName = "Result",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Result?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionCodeControlTypeDetail",
                    Size = 6,
                    Value = TransactionCodeControlTypeDetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RunningLenght",
                    Value = RunningLenght ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterResult,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_GenerateCode] @TransactionCodeControlTypeDetail = @TransactionCodeControlTypeDetail, @RunningLenght = @RunningLenght, @Result = @Result OUTPUT", sqlParameters, cancellationToken);

            Result.SetValue(parameterResult.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
