// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ExpenseTrack.Models;

namespace ExpenseTrack.Data
{
    public partial class AppDBContext : DbContext
    {
        public AppDBContext()
        {
        }

        public AppDBContext(DbContextOptions<AppDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ExpenseGroup> ExpenseGroups { get; set; }
        public virtual DbSet<ExpenseItem> ExpenseItems { get; set; }
        public virtual DbSet<ExpenseLog> ExpenseLogs { get; set; }
        public virtual DbSet<ExpenseLogType> ExpenseLogTypes { get; set; }
        public virtual DbSet<ExpenseStatus> ExpenseStatuses { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=192.168.200.49;Initial Catalog=ExpenseTrack;Persist Security Info=True;User ID=develop;Password=\"pn,9y'8Nlv'ihvp\";Encrypt=False");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Thai_100_CI_AI");

            modelBuilder.Entity<ExpenseGroup>(entity =>
            {
                entity.Property(e => e.ExpenseGroupId).ValueGeneratedNever();

                entity.Property(e => e.ApproveByCode).HasComment("Code ผู้พิจารณา");

                entity.Property(e => e.ApproveByName).HasComment("ผู้พิจารณา");

                entity.Property(e => e.ApproveByUserId).HasComment("UserId ผู้พิจารณา");

                entity.Property(e => e.ApproveDate).HasComment("วันที่พิจารณา");

                entity.Property(e => e.BranchId).HasComment("id สาขา");

                entity.Property(e => e.BranchName).HasComment("สาขา");

                entity.Property(e => e.CancelledByCode).HasComment("Code ผู้ยกเลิก");

                entity.Property(e => e.CancelledByName).HasComment("ผู้ยกเลิก");

                entity.Property(e => e.CancelledByUserId).HasComment("UserId ผู้ยกเลิก");

                entity.Property(e => e.CancelledDate).HasComment("วันที่ยกเลิก");

                entity.Property(e => e.CancelledRemark).HasComment("หมายเหตุยกเลิก");

                entity.Property(e => e.CreatedByCode).HasComment("Code ผู้สร้างรายการ");

                entity.Property(e => e.CreatedByName).HasComment("ผู้สร้างรายการ");

                entity.Property(e => e.CreatedByUserId).HasComment("UserId ผู้สร้างรายการ");

                entity.Property(e => e.CreatedDate).HasComment("วันที่สร้างรายการ");

                entity.Property(e => e.PayeeAccountName).HasComment("ชื่อบัญชีผู้รับเงิน");

                entity.Property(e => e.PayeeAccountNumber).HasComment("เลขบัญชีผู้รับเงิน");

                entity.Property(e => e.PayeeBankId).HasComment("Id ธนาคารผู้รับเงิน");

                entity.Property(e => e.PayeeBankName).HasComment("ธนาคารผู้รับเงิน");

                entity.Property(e => e.ServicedBranchId).HasComment("id สาขาบริการ");

                entity.Property(e => e.ServicedBranchName).HasComment("สาขาบริการ");

                entity.Property(e => e.ServicedByCode).HasComment("Code ผู้ให้บริการ");

                entity.Property(e => e.ServicedByName).HasComment("ผู้ให้บริการ");

                entity.Property(e => e.ServicedByUserId).HasComment("UserId ผู้ให้บริการ");

                entity.Property(e => e.ShcoolName).HasComment("สถานศึกษา");

                entity.Property(e => e.ShcoolYear).HasComment("ปีการศึกษา");

                entity.Property(e => e.TransfeRemark).HasComment("หมายเหตุการโอน");

                entity.Property(e => e.TransferAmount).HasComment("ยอดเงินโอน");

                entity.Property(e => e.TransferDate).HasComment("วันที่โอน");

                entity.HasOne(d => d.ExpenseStatus)
                    .WithMany(p => p.ExpenseGroups)
                    .HasForeignKey(d => d.ExpenseStatusId)
                    .HasConstraintName("FK_ExpenseGroup_ExpenseStatus");
            });

            modelBuilder.Entity<ExpenseItem>(entity =>
            {
                entity.Property(e => e.ExpenseItemId).ValueGeneratedNever();

                entity.Property(e => e.Amount).HasComment("ยอดเบิก");

                entity.Property(e => e.ApproveAmount).HasComment("ยอดอนุมัติโอน");

                entity.Property(e => e.CustomerDetailCode).HasComment("เลขที่ผู้เอา");

                entity.Property(e => e.CustomerName).HasComment("ชื่อผู้เอาประกัน");

                entity.Property(e => e.CustomerTypeId).HasComment("Id ประเภทผู้เอาประกัน");

                entity.Property(e => e.CustomerTypeName).HasComment("ประเภทผู้เอาประกัน");

                entity.Property(e => e.IdentificationNo).HasComment("เลขบัตรประชาชน/Passport");

                entity.Property(e => e.LevelRoom).HasComment("ระดับชั้น");

                entity.Property(e => e.Remark).HasComment("หมายเหตุ");

                entity.HasOne(d => d.ExpenseGroup)
                    .WithMany(p => p.ExpenseItems)
                    .HasForeignKey(d => d.ExpenseGroupId)
                    .HasConstraintName("FK_ExpenseItem_ExpenseGroup");
            });

            modelBuilder.Entity<ExpenseLog>(entity =>
            {
                entity.Property(e => e.ExpenseLogId).ValueGeneratedNever();

                entity.HasOne(d => d.ExpenseGroup)
                    .WithMany(p => p.ExpenseLogs)
                    .HasForeignKey(d => d.ExpenseGroupId)
                    .HasConstraintName("FK_ExpenseLog_ExpenseGroup");

                entity.HasOne(d => d.ExpenseType)
                    .WithMany(p => p.ExpenseLogs)
                    .HasForeignKey(d => d.ExpenseTypeId)
                    .HasConstraintName("FK_ExpenseLog_ExpenseType");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}